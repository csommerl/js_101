# Lesson 2
the imperative or procedural way to solve a problem; to map out the step-by-step logic our program would need to solve a problem; js101
the declarative way to solve a problem; to use (for example) a method that lets us iterate, instead of looping manually; js101
linter; program/tool that inspects your code for potential errors and "code smells," and for adherence to the best practice determined by developers over the years.; js101
Number.isNaN(); method that determines whether the passed value is NaN and its type is Number.; js101
String.prototype.trimStart(); method that removes whitespace from the beginning of a string. trimLeft() is an alias of this method.; js101
stack trace; a report of the active stack frames at a certain point in time during the execution of a program; js101
trapping the error; Identifying the area where an error originates; js101
> node inspect file.js; how to run node's debugger; js101
> npx eslint file.js; how to run eslint; js101
> exec variableName; in node's debugger, how to access the value of any variables that are in scope at that point in execution; js101
> n/next in node debugger; how to move to the next expression in node's debugger; js101
> c/cont in node debugger; how to continue execution in node's debugger until the end or an error; js101
> debugger; invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.; js101
> .exit; how to exit node's debugger; js101
> run/restart; how to start program execution again in node's debugger; js101
breakpoint; an intentional stopping or pausing place in a program, put in place for debugging purposes. It is also sometimes simply referred to as a pause.; js101
throw an error, raise an exception; ways errors are described as occurring; js101
ReferenceError; error that occurs when you attempt to use a variable or function that doesn't exist; js101
TypeError; error that occurs, for example, by 1) accessing a property on a value that does not have properties (e.g., null), 2) trying to call something that isn't a function, 3) trying to reassign a const variable; js101
SyntaxError; error that occurs imeediately after loading a JS program but before it begins to run; js101
guard clause; code that guarantees data meets certain preconditions before it gets used; js101
when to use guard clauses; best used when a function can't trust that its arguments are valid; js101
edge case; a problem or situation that occurs only at an extreme (maximum or minimum) operating parameter; js101
JSON.parse(); method that parses a JSON string, constructing the JavaScript value or object described by the string; js101
try/catch (error)/finally block; 1) Do something that might fail here and throw an exception, 2) code that only runs if something in the try clause throws an exception. ("error" contains the exception object), 3) code that always runs even if the above code throws an exception.; js101
Error.prototype.name; represents a name for the type of error. The initial value is "Error".; js101
Error.prototype.message; a human-readable description of the error.; js101
When to use try/catch; Only use when the following conditions are both true: 1) A built-in JavaScript function or method can throw an exception and you need to handle or prevent that exception, 2) A simple guard clause is impossible or impractical to prevent the exception.; js101
what it emeans for an operator to bind more tightly to its operands; another way of saying that the operator has higher precedence than another; js101
require('./file.json'); how to import a file; js101
difference between JSON and JS dictionary; everything must be put in double quotation marks; js101
Number(''), Number('   '), Number([]), Number(undefined), Number(null); what gets returned as using Number(); js101
Differences between parseInt() and Number(); 1) parseInt() converts strings to numbers even when the string contains non-numeric characters, 2) accepts a second argument called the radix, specifying the base of the number contained in the string; js101
unary + operator; attempts to coerce a value to a number. works like the Number function, but is more succinct; js101
Why toString() cannot be called directly on a number literal; this and all methods don't work because that JavaScript interprets the . as part of a floating point number: can use () or ..; js101
Array.prototype.toString(); converts every element of an array to a string, then concatenates them all with a , between each string: treats null and undefined elements as empty values; js101
Advantage of String() over toString(); can coerce values to strings, including null and undefined; js101
Implicit type coercion; what happens when you perform an operation involving values of two different types and JavaScript coerces the values to have the same type. That type varies based on the specific combination of types involved in the original expression; js101
idiomatic name; a name that follows naming conventions; js101
when non-idiomatic names make sense to use; names are commonly used by external libraries to provide names that are easy to type yet unlikely to conflict with names in other libraries; js101
magic number; a number (or other simple value) that appears in your program without any information that describes what that number represents. should be made into a constant!; js101
why have a space after if, for, while, etc.; to prevent confusion between statements and function calls; js101
what two things determine variable scope; what is determined by taking together the keyword you use to declare a variable and the location where you declare it; js101
what parameters technically are; they are local variables that are initialized from the argument passed to the function; js101
only names that don't get involved in shadowing; property names of objects are exempt from this rule for names; js101
what the concept of "pass-by-value" traditionally means; when you use a variable to pass an argument to a function, the function can't do anything that sets the original variable to a different value; js101
pass-by-value-of-the-reference or call-by-sharing; When an operation within the function mutates its argument, it affects the original object.; js101
destructive functions or methods; Functions and methods that mutate their callers; js101
where to put global constants; put near the top of the program file, usually just after any require calls; js101
console.clear(); method that clears the console if the environment allows it; js101
return value of a variable declaration + initialization; when does a variable return undefined; js101
return value of a variable reassignment; returns the new value of the variable; js101