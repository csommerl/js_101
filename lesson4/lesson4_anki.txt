What happens when you provide negative arguments to str.slice()?; When given negative numbers as the indices, str.slice() treats them as string length + index.; js101
slice and substring differences; 1. When the start index is greater than the end index, substring swaps the two arguments while slice returns an empty string. 2. When either argument is negative, substring treats them as 0, while, as we saw above, slice treats them as length + index. We recommend using String.prototype.slice. Its behavior is more natural and predictable when dealing with these edge cases.; js101
What happens when an object is initialized with duplicate key/property names?; The first one is overwritten by the next one.; js101
How to differentiate between a non-existent property vs. a property that has undefined as its value?; 1. Object.prototype.hasOwnProperty, 2. Object.keys along with the array includes method; js101
How are non-element properties handled with arrays?; 1. length property does not change, 2. these properties are ignored by array methods like forEach, map, and filter, 3. these properties are included by object methods like Object.keys; js101
What happens when you try to reassign a string element?string element reassignment, even though it's syntactically permitted, doesn't affect the string. The reassignment value is returned; js101
Difference between str.charAt() and str.[]; when using indices for characters that don't exist, charAt returns an empty string (''), while [] returns undefined; js101
String.prototype.charCodeAt(); method that returns the Unicode code point or character code of the character at that index. A Unicode code point is the number that represents a given character at the machine level. If you don't provide an index, it assumes the index 0.; js101
What it means to be a static method?; It is a method that operates directly on the class/constructor for the particular data type; js101
String.prototype.trimEnd(); method that removes whitespace from the end of a string. trimRight() is an alias of this method.; js101
String.prototype.startsWith(); mehtod determines whether a string begins with the characters of a specified string, returning true or false as appropriate.; js101
How to iterate with for & while loops over an object?; Use Object.keys() or for/in loop; js101
Difference between iterating over an object using Object.keys or for/in loop?; Object.keys will only iterate over the objects own properties, whereas for/in loop will iterate over the prototype properties as well; js101
How to use for/in loop without iterating over prototype properties?; use hasOwnProperty; js101
How ES6+ guarantee the iteration order for an object's property keys. The order is based on: 1) the types of the property keys (strings come before symbols), 2) the values of the keys (non-negative integers come first), and 3) the order in which the keys were added to the object.; js101
Why use continue as a guard clause in a loop?; Do this in order to: 1) show clearly that the loop has no interest in a particular case and 2) unnest the logic of the loop; js101
algorithm; a logical sequence of steps from input to output to accomplish a task or objective, or a series of steps to structure the data in a way that produces the required output; js101
Selection; picking some elements out of a collection depending on one or more criteria; js101
Transformation; refers to manipulating every element in the collection; js101
identity transformation; a transformation that leaves the original elements unchanged; js101
callback; a function expression provided to another function/method as an argument; js101
second parameter of forEach; the function also takes a parameter of index; js101
how to call forEach on a string; use String.prototype.split('') to call this array method; js101
how to call forEach on an object's values; use Object.values(obj) to call this array method; js101
how to call forEach on an object's keys/properties; use Object.keys(obj) to call this array method; js101
how to call forEach on an object's key-value pairs; use Object.entries(obj), and then use array destructuring assignment to call this array method; js101
Array methods for iteration, selection, and transformation; forEach, filter, and map, respectively; js101
What to use to filter an object?; It is best to use forEach with a selection criterion, rather than a combination of filter and forEach; js101
How to apply filter & map with strings for selection and transformation?; Use split & join to convert to an array and back again; js101
Array.prototype.some(); method that tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true. Otherwise it returns false. It doesn't modify the array.; js101
let [firstVariable, secondVariable, ...] = array or let [firstVariable, secondVariable, ...] = [valueOne, valueTwo, ...]; The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.; js101
Array.prototype.find(); The find() method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.; js101
Array.prototype.findIndex(); The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.; js101
Difference between indexOf() and findIndex() methods for arrays; indexOf() returns the first index at which a given element can be found in the array, whereas findIndex() returns the index of the first element in the array that satisfies the provided testing function.; js101
Difference between find() and findIndex() methods on arrays; find returns the *value* of the first element that meets the condition, whereas findIndex returns the *index* of the value of the first element that meets the condition; js101
Ways to check whether an object contains a key; 1) Object.keys(obj).includes(keyName), 2) obj.hasOwnProperty(keyName); js101
